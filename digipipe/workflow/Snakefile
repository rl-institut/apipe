"""
Snakemake file for digipipe
"""

from snakemake.utils import min_version
min_version("6.0")

from digipipe.scripts.config import load_dataset_configs
from digipipe.store.utils import get_abs_dataset_path
from digipipe.config import GLOBAL_CONFIG

config = GLOBAL_CONFIG
config.update(load_dataset_configs())

# include store modules
include: "../store/preprocessed/module.smk"
include: "../store/datasets/module.smk"

# ===== RULES =====

rule all:
    input:
        forests=rules.datasets_osm_forest_extract_tags.output,
        muns=rules.datasets_bkg_vg250_muns_region_create.output,
        districts=rules.datasets_bkg_vg250_districts_region_create.output,
        region=rules.datasets_bkg_vg250_region_create.output,
        wind=rules.datasets_bnetza_mastr_wind_region_create.output,
        pv_ground=rules.datasets_bnetza_mastr_pv_ground_region_create.output,
        pv_roof=rules.datasets_bnetza_mastr_pv_roof_region_create.output,
        biomass=rules.datasets_bnetza_mastr_biomass_region_create.output,
        hydro=rules.datasets_bnetza_mastr_hydro_region_create.output,
        combustion=rules.datasets_bnetza_mastr_combustion_region_create.output,
        mastr_names=rules.datasets_bnetza_mastr_captions_create.output,
        gsgk=rules.datasets_bnetza_mastr_gsgk_region_create.output,
        storage=rules.datasets_bnetza_mastr_storage_region_create.output,
        population=rules.datasets_population_create.output
    # run:
    #     print("CONFIG MAIN:")
    #     print(config)
    #     print(workflow.basedir)

rule clean:
    """
    Remove all output and temporary files.
    """
    params:
        preprocessed=expand(
            get_abs_dataset_path("preprocessed", "{name}", data_dir=True) / "*",
            name=config.get("store")["preprocessed"].keys()
        ),
        datasets=expand(
            get_abs_dataset_path("datasets", "{name}", data_dir=True) / "*",
            name=config.get("store")["datasets"].keys()
        )
    shell:
        """
        rm -f {params.preprocessed}
        rm -f {params.datasets}
        """

rule download_raw_zip:
    output:
        "store/temp/store_raw.zip",
    shell:
        """
        set -e
        wget -O store/temp/store_raw.zip https://wolke.rl-institut.de/s/w8WKwXT3f9ZzZQJ/download
        """

rule update_raw:
    input:
        "store/temp/store_raw.zip",
    run:
        import os, builtins
        import shutil
        import zipfile

        temp_dir = "store/temp"
        raw_dir = "store/raw"
        temp_raw_dir = "store/temp/store/raw"

        # Extract the files from the ZIP file to temp_dir
        with zipfile.ZipFile("store/temp/store_raw.zip", "r") as zip_ref:
            zip_ref.extractall(temp_dir)

            # Iterate through all subdirectories of the root directory
        for dirpath, dirnames, filenames in os.walk(temp_raw_dir):
            # Iterate through all files in the current directory
            for filename in filenames:
                # Check if the file is a zip file
                if filename.endswith(".zip"):
                    # Extract the zip file to the current directory
                    with zipfile.ZipFile(
                        os.path.join(dirpath, filename), "r"
                    ) as zip_ref:
                        zip_ref.extractall(dirpath)
                    os.remove(os.path.join(dirpath, filename))

                # Get a list of all directories within temp_raw_dir
        dir_list = [
            d
            for d in os.listdir(temp_raw_dir)
            if os.path.isdir(os.path.join(temp_raw_dir, d))
        ]

        # Loop through each directory and copy it to raw_dir
        for d in dir_list:
            src_dir = os.path.join(temp_raw_dir, d)
            dst_dir = os.path.join(raw_dir, d)
            if os.path.exists(dst_dir):
                print(
                    f"Directory '{dst_dir}' already exists. Do you want to overwrite it?"
                )
                overwrite = builtins.input("Enter y/n: ")
                if overwrite.lower() == "y":
                    shutil.rmtree(dst_dir)
                else:
                    continue
            # Copy the directory to the destination directory
            shutil.copytree(src_dir, dst_dir)
        # clean temp folder
        temp_dir_content = os.listdir(temp_dir)
        for item in temp_dir_content:
            item_path = os.path.join(temp_dir, item)
            if os.path.isfile(item_path) and item != ".gitkeep":
                # If the item is a file, remove it
                os.remove(item_path)
            elif os.path.isdir(item_path):
                shutil.rmtree(item_path)
