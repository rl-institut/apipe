from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
from digipipe.esys.esys.config.esys_conf import load_yaml

HTTP = HTTPRemoteProvider()

def get_paths_scenario_input(wildcards):
    scenario_specs = load_yaml(f"scenarios/{wildcards.scenario}.yml")
    paths_scenario_inputs = list()
    for key in ["paths_scalars", "paths_timeseries"]:
        paths = scenario_specs[key]
        if isinstance(paths, list):
            paths_scenario_inputs.extend(paths)
        elif isinstance(paths, str):
            paths_scenario_inputs.append(paths)
    return paths_scenario_inputs

rule build_datapackage:
    input:
        get_paths_scenario_input,
        scenario="scenarios/{scenario}.yml"
    output: directory("results/{scenario}/preprocessed")
    params:
        logfile="results/{scenario}/{scenario}.log"
    wildcard_constraints:
        # Do not use this rule for the examples. Use prepare_example instead
        scenario=r"(?!example_).*"
    shell: "python scripts/build_datapackage.py {input.scenario} {output} {params.logfile}"

rule prepare_scalars:
    input:
        raw_scalars="raw/scalars/costs_efficiencies.csv",
    output: "results/_resources/scal_costs_efficiencies.csv"
    shell: "python scripts/prepare_scalars.py {input.raw_scalars} {output}"

rule optimize:
    input: "results/{scenario}/preprocessed"
    output: directory("results/{scenario}/optimized/")
    params:
        logfile="results/{scenario}/{scenario}.log"
    shell: "python scripts/optimize.py {input} {output} {params.logfile}"

rule postprocess:
    input: "results/{scenario}/optimized"
    output: directory("results/{scenario}/postprocessed/")
    params:
        logfile="results/{scenario}/{scenario}.log"
    shell: "python scripts/postprocess.py {input} {wildcards.scenario} {output} {params.logfile}"
